#include <iostream> 
#include <cstdlib>
#include <windows.h>
#include <conio.h>
#include <ctime>
#include <fstream>
#include <iomanip>

using namespace std;

ifstream inp;  //чтение и запись файлов данных
ofstream outp;

char c[30][21]; //переменная для хранения экранных частиц (пикселей)
int n[30][21];  //переменная для проверки
int highscore;
int contr, tuk = 0, score = 0, t = 0, bt = 0, birdx = 0, birdy = 0; //variaous variables for certain operations
bool err; //значение для обнаружения ошибок

void game();  //различные функции 
void screen();
void pipes();
void bird();
bool gameover();
void checkscore();
void help();
void menu();
void endgame();

int main()
{
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    srand(time(0));  //объявление случайного числа, оно нам понадобится позже
    inp.open("/Program Files/FlappyBird/options.txt");  //открытие файла, в котором хранится рекорд
    if (inp.is_open()) //если файл открывается успешно, он считывает рекорды
    {
        inp >> highscore;
        inp.close();
        err = false;  //ошибка будет ложной, потому что файл успешно открыт
    }
    else
    {
        highscore = 0; //если файл не существует, рейтинг будет равен 0, а ошибка будет истинной
        err = true;
    }

    int a = 0, b;
    char sl; //переменная выбора
    while (1) //цикл для повторения действий после каждого запуска
    {
        if (a == 0) goto play;
        if (a > 0)               //если вы играете не первый раз, вас спросят, хотите ли вы поиграть ещё
        {
            score = 0;
            cout << "Хотите поиграть еще? [д/н] ";
            cin >> sl;
            if (sl == 'н') goto quit;
            else goto play;
        }
    play:
        menu(); //вызов функции меню
        cin >> sl;
        switch (sl) //выбор меню
        {
        case '1':
        {
            game(); //если вы выберете игру, она вызовет функцию game
            break;
        }
        case '2': //другой выбор - другие функции
        {
            help();
            goto play;
            break;
        }
        case '3':
        {
            goto quit; //выход из игры
            break;
        }
        default:
        {
            goto play;
            break;
        }
        }
        a++; //переменная для проверки того, сколько раз вы играли
    }
quit:
    {
        cout << "Хватит."; //остановка игры, приложение закрывается
    }

    return 0;
}

void game()  //функция для игры
{
    int x, y;
    char s;
    for (y = 0; y < 21; y++)  //setting screen              
    {
        for (x = 0; x < 30; x++)
        {
            if (y < 20)
            {
                c[x][y] = ' ';
                n[x][y] = 0;
            }
            if (y == 20)
            {
                c[x][y] = '-';
                n[x][y] = 2;
            }
        }
    }
    c[10][10] = '*';  //в этих координатах будет наша птица, она будет выглядеть так *
    screen();      //вызывает функцию для показа на экране
    while (1)       //цикл начинается, начинается игровой процесс
    {
        s = '~';  //управляющая переменная по умолчанию
        Sleep(150); //Понижение скорости движения
        t++;              //это переменная для хранения "времени" или количества проходов цикла
        if (_kbhit()) //если клавиша нажата, выполняются определенные действия, чтобы птица поднялась
        {
            s = _getch();        //получает, какая клавиша нажата
            if (s != '~') tuk = 1; //если это не по умолчанию, то tuk будет равно 1, что означает, что птица взлетит
        }
        for (x = 0; x < 30; x++) //просто закладываю основу
        {
            c[x][20] = '-';
            n[x][20] = 2;
        }
        bird();                       //вызов функции движения птицы
        checkscore();                 //проверка очков
        if (gameover() == true) goto gameEnd;   //проверяет, попадает ли птица в трубы, если да, игра заканчивается
        pipes();                             //появление и перемещение труб
        if (score > highscore) highscore = score;  //рекорд 
        screen();                            //наконец, вызывает функцию экрана, чтобы показать все.

        if (tuk > 0) tuk++;           //при нажатии клавиши птица взлетит 2 раза
        if (tuk == 3) tuk = 0;          //после этого,птица падает
    }
gameEnd:   //конец игры
    {
        if (score > highscore) highscore = score;
        if (err == false)              //если файл высоких результатов существует, он записывает в него новый рекорд.
        {
            outp.open("/Program Files/FlappyBird/options.txt");
            outp << highscore;
            outp.close();
        }
        screen();    //показывает конечный экран и возвращается к int main
        endgame();
        return;
    }
}

void screen()    //функция для показа экрана
{
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    int x, y;
    system("cls");    //очищает консоль
    for (y = 0; y < 21; y++) //показывает пиксели в их координатах, и счет
    {
        for (x = 0; x < 30; x++)
        {
            if (x < 29) cout << c[x][y];
            if (x == 29) cout << c[x][y] << endl;
        }
    }
    cout << "" << endl;
    cout << "Ваш Счёт: " << score;
}

void pipes()  //движение трубы и функция их появления
{
    int x, y, r;
    if (t == 10)   //если время равно 10 или цикл прошел 10 раз, он порождает новую трубу
    {
        r = (rand() % 11) + 5;  //генерирует случайное число, которое будет центром отверстия трубы
        for (y = 0; y < 20; y++)  // нужна только координата y
        {
            c[29][y] = '|';  //устанавливает трубу
            n[29][y] = 2;    //n будет 2, чтобы проверить, попала ли в него птица
        }
        c[29][r - 1] = ' ';  //устанавливает отверстие
        c[29][r] = ' ';
        c[29][r + 1] = ' ';
        n[29][r - 1] = 0;
        n[29][r] = 0;
        n[29][r + 1] = 0;
        t = 0;
        goto mv; //перемещает трубы
    }
    else goto mv;
mv:                 //движение трубы
    {
        for (y = 0; y < 20; y++)  //цикл для генерации координат
        {
            for (x = 0; x < 30; x++)
            {
                if (c[x][y] == '|')  //все трубы будут перемещены влево на 1
                {
                    if (x > 0)
                    {
                        c[x - 1][y] = '|';
                        n[x - 1][y] = 2;
                        c[x][y] = ' ';
                        n[x][y] = 0;
                    }
                    if (x == 0)  //если экран заканчивается (x = 0) труба исчезнет, чтобы предотвратить ошибки
                    {
                        c[x][y] = ' ';
                        n[x][y] = 0;
                    }
                }
            }
        }
    }
}

void bird()   //функция движения птицы
{
    int x, y;
    if (tuk > 0) //если кнопка нажата, птица взлетает
    {
        bt = 0;
        for (y = 0; y < 20; y++)   //цикл для поиска координат птиц
        {
            for (x = 0; x < 30; x++)
            {
                if (c[x][y] == '*')
                {
                    if (y > 0)
                    {
                        c[x][y - 1] = '*';  //птица поднимается на 1
                        c[x][y] = ' ';
                        birdx = x;        //устанавливает координату птицы по оси x
                        birdy = y - 1;      //устанавливает координату птицы по оси y
                        return;         //возвращает функцию game
                    }
                }
            }
        }
    }
    else   //если клавиша не нажата , птица падает
    {
        bt++;
        for (y = 0; y < 20; y++)
        {
            for (x = 0; x < 30; x++)
            {
                if (c[x][y] == '*')
                {
                    if (y < 20)  //если птица не на земле
                    {
                        if (bt < 3)   //если время птицы меньше 3, оно падает на 1 пиксель
                        {
                            c[x][y + 1] = '*';
                            c[x][y] = ' ';
                            birdx = x;
                            birdy = y + 1;
                            return;
                        }
                        else if (bt > 2 && bt < 5)  //прошло больше времени, птица падает быстрее (ускорение)
                        {
                            c[x][y + 2] = '*';
                            c[x][y] = ' ';
                            birdx = x;
                            birdy = y + 2;
                            return;
                        }
                        else if (bt > 4)
                        {
                            c[x][y + 3] = '*';
                            c[x][y] = ' ';
                            birdx = x;
                            birdy = y + 3;
                            return;
                        }
                    }
                    else
                    {
                        return;  //если птица уже находится на земле, функция возвращается, чтобы проверить окончание игры
                    }
                }
            }
        }
    }
}
void checkscore()  //проверка счёта птицы
{
    int y;
    for (y = 0; y < 20; y++)
    {
        if (c[birdx][y] == '|')  //если координата птицы x равна координате трубы, вы получаете 1 балл
        {
            score++;
            return;
        }
    }
}

bool gameover()  //проверяет, попала ли птица во что-нибудь
{
    int x, y, f = 0;
    if (birdy > 19) //проверяет упала ли птица на землю
    {
        c[birdx][19] = '*';  //снова устанавливает птицу и землю, предотвращает ошибки
        c[birdx][20] = '-';
        f = 1;           //f = 1, означает, что функция вернет истину
        goto quit;
    }
    else
    {     //проверяет, попала ли птица в трубы, здесь нужна переменная n (координата трубы n равна 2 (больше 0))
        if (n[birdx][birdy] > 0 && (c[birdx][birdy] == '|' || c[birdx][birdy] == '*'))
        {
            c[birdx][birdy] = '|';
            c[birdx - 1][19] = '*';
            f = 1;
            goto quit;
        }
    }
quit:
    if (f == 1) return true;
    else return false;
}

void endgame() //несколько экранов для определенных действий
{
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    screen();   //этот появляется, если игра заканчивается
    cout << "" << endl << endl;
    cout << " ---------------------------------------------------------------------------------------- " << endl;
    cout << "|   *   *    ****    *   *   *****   *    *        *     *   ******   ****    *      *   |" << endl;
    cout << "|   *  *    *    *   *   *   *       *    *        *   * *   *        *   *   *      *   |" << endl;
    cout << "|   ***     *    *   *****   *****   *    *        *  *  *   *        ****    *****  *   |" << endl;
    cout << "|   *  *    *    *   *   *   *       *    *        * *   *   *        *       *    * *   |" << endl;
    cout << "|   *   *    ****    *   *   *****   *******       *     *   *        *       *****  *   |" << endl;
    cout << "|                                          *                                             |" << endl;
    cout << " ---------------------------------------------------------------------------------------- " << endl;
    cout << "" << endl << endl;
    cout << "                        Т В О Й   С Ч Ё Т :   " << score << endl << endl;
    cout << "                        Р  Е  К  О  Р  Д  : " << highscore << endl;
    cout << "" << endl << endl;
}

void menu()  //показывает меню 
{
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    system("cls");
    cout << "" << endl;
    cout << " --------------------------------------------------------  " << endl;
    cout << "|                                                        | " << endl;
    cout << "|   **** *    **** **** **** *   *    ***  * ***  ***    | " << endl;
    cout << "|   *    *    *  * *  * *  * *   *    *  * * *  * *  *   | " << endl;
    cout << "|   ***  *    **** **** **** *****    ***  * ***  *  *   | " << endl;
    cout << "|   *    *    *  * *    *      *      *  * * *  * *  *   | " << endl;
    cout << "|   *    **** *  * *    *      *      ***  * *  * ***    | " << endl;
    cout << "|                                                        | " << endl;
    cout << " --------------------------------------------------------  " << endl;
    cout << "" << endl << endl;
    cout << "                  Рекорд:  " << highscore << endl << endl;
    cout << "" << endl << endl;
    cout << "                     М Е Н Ю:     " << endl << endl;
    cout << "                  1: Начать игру  " << endl << endl;
    cout << "                  2: Помощь       " << endl << endl;
    cout << "                  3: Выход        " << endl << endl;
}

void help()
{
    SetConsoleCP(1251);
    SetConsoleOutputCP(1251);
    char sel;
    system("cls");
    while (true)
    {
        cout << "" << endl << endl;
        cout << "                  Управление: нажмите любую клавишу, чтобы взлететь.         " << endl << endl;
        cout << "                     Цель: Пролететь сквозь дыры между трубами.              " << endl;
        cout << "                 Когда вы проходите через дыру, вы получаете 1 очко.         " << endl;
        cout << "                     Постарайтесь пролететь как можно больше.                " << endl;
        cout << "                Но будьте осторожны, не ударяйтесь о трубы или землю!" << endl << endl;
        cout << "                             Вы готовы? Тогда вперёд!                " << endl << endl << endl;
        cout << "Вернуться назад? [д/н]  ";
        cin >> sel;
        if (sel == 'д') return;
        else system("cls");
    }
}
